// pages/api/corrigir.ts
import type { NextApiRequest, NextApiResponse } from 'next'

export const config = {
  api: { bodyParser: { sizeLimit: '2mb' } },
}

const gerarPrompt = (tema: string, redacao: string): string => `
Corre√ß√£o Completa e Detalhada de Reda√ß√£o no Estilo ENEM

A seguir est√° uma reda√ß√£o escrita com base no tema proposto. Voc√™ deve atuar como um AVALIADOR OFICIAL DO ENEM, aplicando os crit√©rios das cinco compet√™ncias com m√°xima precis√£o e rigor t√©cnico.  
Siga estritamente os par√¢metros e instru√ß√µes abaixo antes de iniciar a avalia√ß√£o.

---

üß≠ OBJETIVO:
Realizar uma corre√ß√£o completa e fundamentada, atribuindo notas de 0 a 200 para cada compet√™ncia, justificando-as com base em trechos do texto, identificando erros e apresentando sugest√µes de melhoria com exemplos.

---

üìò INSTRU√á√ïES GERAIS:

1. Analise a reda√ß√£o de forma imparcial, t√©cnica e objetiva, como um corretor treinado pelo INEP.  
2. Use o portugu√™s formal e linguagem acad√™mica.  
3. Cada compet√™ncia deve conter:
   - **Nota num√©rica (0 a 200)**
   - **Justificativa t√©cnica**, com exemplos retirados do texto.
   - **Principais erros**, identificando o tipo de falha (ortografia, argumenta√ß√£o, estrutura, coes√£o, proposta, etc.).
   - **Corre√ß√µes sugeridas**, reescrevendo uma ou duas frases de exemplo.
   - **Dicas de melhoria** (de 2 a 4 por compet√™ncia), diretas e espec√≠ficas.
4. Ao final, **apresente a nota total (0 a 1000)** e um **resumo final de 3 prioridades de revis√£o** (por exemplo: ‚Äú1. Corrigir v√≠cios de concord√¢ncia; 2. Refor√ßar argumentos; 3. Detalhar proposta de interven√ß√£o‚Äù).

---

üìä MODELO DE FORMATA√á√ÉO ESPERADA:

**Compet√™ncia X ‚Äî [T√≠tulo da compet√™ncia]**
- Nota: XX / 200  
- Justificativa: [an√°lise textual com cita√ß√µes curtas]  
- Principais erros: [lista objetiva de falhas]  
- Corre√ß√µes sugeridas: [1‚Äì2 reescritas modelo]  
- Dicas espec√≠ficas: [3 bullets de orienta√ß√£o pr√°tica]

(repita o mesmo formato para as 5 compet√™ncias)

**Nota total: XXXX / 1000**

**Resumo de prioridades (3 principais pontos de revis√£o):**
1. ...
2. ...
3. ...

---

üìë GUIA DETALHADO DE AVALIA√á√ÉO DAS COMPET√äNCIAS:

### üß© Compet√™ncia 1 ‚Äî Dom√≠nio da norma padr√£o da l√≠ngua portuguesa
Avalie se o texto demonstra dom√≠nio da escrita formal, observando:
- Ortografia, acentua√ß√£o e pontua√ß√£o corretas;
- Concord√¢ncia verbal e nominal;
- Reg√™ncia verbal e nominal;
- Emprego de pronomes, tempos verbais e coes√£o sint√°tica;
- Aus√™ncia de coloquialismos e abrevia√ß√µes.

**Crit√©rios de nota (refer√™ncia oficial):**
- 0‚Äì50: erros graves e sistem√°ticos, comprometendo a compreens√£o.
- 51‚Äì100: erros frequentes que dificultam o entendimento.
- 101‚Äì150: alguns deslizes, mas compreens√£o preservada.
- 151‚Äì200: poucos ou nenhum erro, excelente dom√≠nio da norma culta.

**Exemplo de justificativa esperada:**
> ‚ÄúH√° falhas recorrentes de acentua√ß√£o (‚Äòpais‚Äô em vez de ‚Äòpa√≠s‚Äô) e concord√¢ncia (‚Äòas pessoa √©‚Äô). Tais desvios comprometem a clareza em alguns trechos, justificando nota intermedi√°ria.‚Äù

---

### üß† Compet√™ncia 2 ‚Äî Compreens√£o da proposta e desenvolvimento do tema
Avalie se o texto:
- Atende integralmente ao tema proposto;
- Estrutura-se em texto dissertativo-argumentativo;
- Apresenta **tese expl√≠cita** e **progress√£o l√≥gica** (introdu√ß√£o, desenvolvimento e conclus√£o);
- Demonstra repert√≥rio sociocultural relevante e produtivo;
- Evita fuga total ou tangencial ao tema.

**Crit√©rios de nota:**
- 0‚Äì50: fuga total do tema ou aus√™ncia de estrutura.
- 51‚Äì100: abordagem parcial, estrutura prec√°ria.
- 101‚Äì150: adequa√ß√£o com falhas de argumenta√ß√£o ou estrutura.
- 151‚Äì200: texto bem estruturado e plenamente adequado ao tema.

**Exemplo de justificativa esperada:**
> ‚ÄúO texto apresenta tese impl√≠cita, o que reduz a clareza da argumenta√ß√£o. Apesar disso, h√° rela√ß√£o com o tema e tentativa de conclus√£o coerente.‚Äù

---

### ‚öñÔ∏è Compet√™ncia 3 ‚Äî Sele√ß√£o e organiza√ß√£o dos argumentos
Avalie:
- Relev√¢ncia e consist√™ncia dos argumentos;
- Capacidade de relacionar causas, consequ√™ncias e solu√ß√µes;
- Uso produtivo de repert√≥rio (dados, fatos, cita√ß√µes, exemplos, alus√µes);
- Coer√™ncia e encadeamento l√≥gico das ideias.

**Crit√©rios de nota:**
- 0‚Äì50: aus√™ncia de argumenta√ß√£o ou contradi√ß√µes graves.
- 51‚Äì100: argumenta√ß√£o fraca, simplista ou repetitiva.
- 101‚Äì150: bons argumentos, por√©m pouco desenvolvidos.
- 151‚Äì200: argumentos bem selecionados, consistentes e variados.

**Exemplo de justificativa esperada:**
> ‚ÄúO autor cita a exclus√£o digital, mas n√£o aprofunda causas ou consequ√™ncias. O argumento √© v√°lido, por√©m superficial.‚Äù

---

### üîó Compet√™ncia 4 ‚Äî Coes√£o textual e mecanismos lingu√≠sticos
Analise o uso de:
- Conectivos e operadores argumentativos (‚Äúportanto‚Äù, ‚Äúassim‚Äù, ‚Äúpor outro lado‚Äù, etc.);
- Refer√™ncias e retomadas pronominais claras;
- Organiza√ß√£o dos par√°grafos e transi√ß√µes suaves;
- Evite repeti√ß√µes desnecess√°rias e saltos tem√°ticos.

**Crit√©rios de nota:**
- 0‚Äì50: incoer√™ncia e quebras de encadeamento frequentes.
- 51‚Äì100: transi√ß√µes fracas e uso repetitivo de conectivos.
- 101‚Äì150: coes√£o razo√°vel, com pequenas falhas.
- 151‚Äì200: coes√£o fluida e variada, transi√ß√µes naturais.

**Exemplo de justificativa esperada:**
> ‚ÄúH√° repeti√ß√£o excessiva do conectivo ‚Äòassim‚Äô. Apesar disso, as ideias mant√™m sequ√™ncia l√≥gica aceit√°vel.‚Äù

---

### üåç Compet√™ncia 5 ‚Äî Proposta de interven√ß√£o e respeito aos direitos humanos
Avalie:
- Exist√™ncia de **proposta de interven√ß√£o completa**, contendo:
  - **Agente** (quem faz);
  - **A√ß√£o** (o que ser√° feito);
  - **Meio/modo** (como ser√° feito);
  - **Finalidade** (para qu√™);
  - **Detalhamento m√≠nimo de viabilidade** (exequibilidade).
- Verifique se a proposta respeita os direitos humanos e o tema central.

**Crit√©rios de nota:**
- 0‚Äì50: aus√™ncia ou proposta inaceit√°vel (contr√°ria a direitos humanos).
- 51‚Äì100: proposta vaga, sem detalhamento.
- 101‚Äì150: proposta presente, mas incompleta.
- 151‚Äì200: proposta detalhada, vi√°vel e articulada.

**Exemplo de justificativa esperada:**
> ‚ÄúA proposta menciona que ‚Äòo governo deveria investir mais‚Äô, mas n√£o especifica agente, a√ß√£o e meios. Isso reduz a clareza da interven√ß√£o.‚Äù

---

üìà FINALIZA√á√ÉO:
Depois de avaliar todas as compet√™ncias:

1. Some as notas (m√°x. 1000 pontos);
2. Informe a **Nota Total: XXXX / 1000**;
3. Redija um **Resumo Geral da Reda√ß√£o (3‚Äì5 linhas)**, abordando o desempenho global;
4. Liste **3 prioridades de revis√£o**, numeradas de 1 a 3, que indiquem onde o autor deve concentrar seus esfor√ßos de melhoria.

---

Responda com formata√ß√£o clara e organizada, sem omitir nenhuma compet√™ncia.

---

Tema: ${tema}

Reda√ß√£o:
${redacao}
`

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  if (req.method !== 'POST') return res.status(405).end()

  const { tema, redacao } = req.body as { tema: string; redacao: string }
  if (!tema || !redacao) {
    return res.status(400).json({ error: 'Tema e reda√ß√£o s√£o obrigat√≥rios.' })
  }

  const apiKey = process.env.GEMINI_API_KEY
  console.log('üîë Chave de API usada:', apiKey)

  if (!apiKey) {
    return res
      .status(500)
      .json({ error: 'Chave da API Gemini n√£o configurada.' })
  }

  const prompt = gerarPrompt(tema, redacao)
  const url = `https://generativelanguage.googleapis.com/v1/models/gemini-2.5-pro:generateContent?key=${apiKey}`

  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ contents: [{ parts: [{ text: prompt }] }] }),
    })
    const json = await response.json()
    if (!response.ok) {
      console.error('Erro da API Gemini:', response.status, json)
      return res
        .status(500)
        .json({ error: 'Falha ao comunicar com a IA', detalhes: json })
    }
    const texto =
      json?.candidates?.[0]?.content?.parts?.[0]?.text ||
      'A IA n√£o respondeu.'
    return res.status(200).json({ resposta: texto.trim() })
  } catch (e: any) {
    console.error('Erro geral ao conectar com IA:', e)
    return res
      .status(500)
      .json({ error: 'Erro de conex√£o com a IA', detalhes: e.message })
  }
}
